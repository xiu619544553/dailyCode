//
//  main.m
//  block捕获变量
//
//  Created by hello on 2021/11/5.
//  Block 对变量的捕获
//  1、全局静态变量
//  2、全局变量
//  3、局部静态变量
//  4、局部变量（自动变量）

#import <Foundation/Foundation.h>

// 1、全局静态变量
static int a = 11;

// 2、全局变量
int b = 22;

int main(int argc, const char * argv[]) {
    
    // 3、局部静态变量
    static int c = 33;
    
    // 4、局部变量
    int d = 44;
    
    // 1、全局静态变量
    NSLog(@"a1---%d---%p", a, &a);
    void (^aBlock)(void) = ^void() {
        a = 12;
        NSLog(@"a2---%d---%p", a, &a);
    };
    aBlock();
    NSLog(@"a3---%d---%p", a, &a);
    /*
     输出日志：
     2021-11-05 10:55:25.332753+0800 block捕获变量[7499:94468] a1---11---0x100008028
     2021-11-05 10:55:25.333289+0800 block捕获变量[7499:94468] a2---12---0x100008028
     2021-11-05 10:55:25.333370+0800 block捕获变量[7499:94468] a3---12---0x100008028
     
     结论：全局静态变量，从代码和打印结果看出变量始终在全局数据区，内存地址不变
     */
    
    
    // 2、全局变量
    NSLog(@"b1---%d---%p", b, &b);
    void (^bBlock)(void) = ^void() {
        b = 23;
        NSLog(@"b2---%d---%p", b, &b);
    };
    bBlock();
    NSLog(@"b3---%d---%p", b, &b);
    /*
     输出日志：
 2021-11-05 10:55:25.333498+0800 block捕获变量[7499:94468] b1---22---0x100008020
 2021-11-05 10:55:25.333547+0800 block捕获变量[7499:94468] b2---23---0x100008020
 2021-11-05 10:55:25.333589+0800 block捕获变量[7499:94468] b3---23---0x100008020
     
     结论：全局变量，从代码和打印结果观察和上述一样，也在全局数据区，内存地址不变
     */
    
    
    // 3、局部静态变量，static延长了局部变量的生命周期
    NSLog(@"c1---%d---%p", c, &c);
    void (^cBlock)(void) = ^void() {
        c = 34;
        NSLog(@"c2---%d---%p", c, &c);
    };
    cBlock();
    NSLog(@"c3---%d---%p", c, &c);
    /*
     输出日志：
 2021-11-05 10:55:25.333627+0800 block捕获变量[7499:94468] c1---33---0x100008024
 2021-11-05 10:55:25.333664+0800 block捕获变量[7499:94468] c2---34---0x100008024
 2021-11-05 10:55:25.333699+0800 block捕获变量[7499:94468] c3---34---0x100008024
     
     结论：局部静态变量，static延长了局部变量的生命周期
     */
    
//    // 4、局部变量
//    NSLog("d1---%d---%p", d, &d);
//    void (^dBlock)() = ^void() {
//        d = 45; // ❌
//    };
//    dBlock();
    /*
     dBlock初始化完成后在栈上，捕获的变量会被赋值到block的结构体成员变量上(完成值拷贝，备份)，所以初始化完成捕获到的变量不能修改。
     当main函数返回时，函数的栈被销毁，bdBlock的内存也会被清除，如果在函数结束后仍然引用这个Block的时候，就需要将它拷贝到堆上。
     */
    
    return 0;
}
